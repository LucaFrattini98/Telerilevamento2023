2 + 3
var <- 2 + 3
var
var2 <- 5 + 4
var2

var + var2
sum(var, var2)

var3 <- sum(var, var2)
var3

batterio <- c(10, 20, 30, 40, 50, 60)
dbh <- c(20, 50, 100, 150, 200, 250)

plot(dbh, batterio, main = "alberi vs. batteri", pch = 19, cex =5, col = "salmon" )

# main dà il titolo al grafico (scritto tra parentesi), con pch scelgo il simbolo 
# (ogni numero rappresenta un simbolo diverso) con cex imposto la dimensione del simbolo. 
# con col imposto il colore de simbolo scrivendo in inlgese tra parentesi.

install.packages("raster")
library(raster)
setwd("C:/Lab/")
l2011 <- brick("p224r63_2011_masked.grd")
plot(l2011[[4]])

# visualizzo una immagine con i colori naturali associando le bande landsat a quelle rgb
plotRGB(l2011, r=3, g=2, b=1, stretch="Lin")

# associo la banda NIR landsat (numero 4) al rosso della banda rgb, così posso vedere l'infrarosso
plotRGB(l2011, r=4, g=3, b=2, stretch="Lin")

# associo l'infrarosso al colore verde
plotRGB(l2011, r=3, g=4, b=2, stretch="Lin")

# associo l'infrarosso al blu
plotRGB(l2011, r=3, g=2, b=4, stretch="Lin")

# stretch=Lin serve a streccciare i valori in maniera lineare, serve a visulaizzare meglio l'immagine


l1988 <- brick("p224r63_1988_masked.grd")

plot(l1988[[4]])

# divido l'immagine in due righe in modo da visualizzare le due immagini contemporanemente (multiframe)
par(mfrow=c(2,1)) # mf sta per multiframe, 2 indica il numero di righe, 1 il numero di colonne
plotRGB(l1988, r=4, g=3, b=2, stretch="Lin")
plotRGB(l2011, r=4, g=3, b=2, stretch="Lin")

# posso scrivere il codice anche senza inserire le lettere r, g, b
plotRGB(l2011, 4, 3, 2, stretch="Lin")

# chiudo l'immagine
dev.off()


# stretch=Hist è uno stretch per istogrammi 


par(mfrow=c(2,2))
plotRGB(l1988, r=4, g=3, b=2, stretch="Lin")
plotRGB(l2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(l1988, r=4, g=3, b=2, stretch="Hist")
plotRGB(l2011, r=4, g=3, b=2, stretch="Hist")


# 30/03

library(raster)
setwd("C:/Lab/")

l2006 <- brick("defor2_.png")
l2006 <- brick("defor2_.png")

plot(l2006)
plotRGB(l2006$defor2__1, 1, 2, 3, stretch="Lin")

l1992 <- brick("defor1_.png")
l1992

plot(l1992)
plotRGB(l1992, 1, 2, 3, stretch="Lin")
plotRGB(l2006, 1, 2, 3, stretch="Lin")

par(mfrow=c(2,1))
plotRGB(l1992, 1, 2, 3, stretch="Lin")
plotRGB(l2006, 1, 2, 3, stretch="Lin")

l2006 <- brick("defor2_.png")

# put the two images beside each other

par(mfrow=c(1,2)) # invece di c(2,1) come prima
plotRGB(l1992, 1, 2, 3, stretch="Lin")
plotRGB(l2006, 1, 2, 3, stretch="Lin")


# DVI Difference Vegetation Index

dvi1992 = l1992[[1]] - l1992[[2]] # unam maggiore differenza nella dvi indica una distruzione della foresta

cl <- colorRampPalette(c('darkblue','yellow','red','black'))(100) # specifying a color scheme
plot(dvi1992, col=cl)


dvi2006 = l2006[[1]] - l2006[[2]]
plot(dvi2006, col=cl)


# confronto multitemporale dvi 1992 - dvi 2006

difdvi = dvi1992 - dvi2006

cld = colorRampPalette(c('blue','white','red'))(100)

plot(difdvi, col=cld)

dev.off()


# in una immagine ad 8bit il Range DVI (8 bit): -255 a 255
# Range DVI (16 bit): -65535 a 65535 non posso fare confronti dvi fra due immagini con bit diversi
# per ovviare a questo problema possiamo standardizzare il dvi (NDVI) normalized dvi, che varia sempre tra 1 e -1
# quindi ndvi possiamo usarlo sempre per fare confronti tra immagini con bit diversi

ndvi1992 = dvi1992/(l1992[[1]] + l1992[[2]])

plot(ndvi1992, col=cl)


ndvi2006 = dvi2006/(l2006[[1]] + l2006[[2]])

plot(ndvi2006, col=cl)

difndvi = ndvi1992 - ndvi2006
plot(difndvi, col= cld)

# la risoluzione di una immagine è composta da 3 tipologie:
# risoluzione spaziale = dimensione pixel
# risoluzione spettrale = numero di bande
# risoluzione radiometrica = numero di bit di quella immagine


# Multiframe with NDVI1992 on top of the NDVI2006 image
par(mfrow=c(2,1))
plot(ndvi1992, col=cl)
plot(ndvi2006, col=cl)



setwd("C:/Lab/Greenland")

lst_2000 <- raster("lst_2000.tif") # la funzione raster importa bande singole e non tutti insieme come la funzione brick
plot(lst_2000)

dev.off()

# importing all the data
lst_2005 <- raster("lst_2005.tif")
lst_2010 <- raster("lst_2010.tif")
lst_2015 <- raster("lst_2015.tif")

# per vedere che siano state caricate tutte usiamo questa funzione che ci fa la lista di tutti gli oggetti caricati

ls()

# per caricarle tutte insieme invece di una alla volta usiamo la funzione lapply che applica la funzione raster alla lista di oggetti creata
# per prima cosa creiamo la lista
rlist <- list.files(pattern="lst") # il pattern è un pezzo di nome comune agli oggetti che vogliamo caricare in questo caso lst

lapply(rlist, raster) # applica una funzione ad una determinata lista


# 31/03 Times series

library(raster)

setwd("C:/Lab/Greenland")

lst_2000 <- raster("lst_2000.tif")
lst_2005 <- raster("lst_2005.tif")
lst_2010 <- raster("lst_2010.tif")
lst_2015 <- raster("lst_2015.tif")

par(mfrow=c(2,2))

plot(lst_2000)
plot(lst_2005)
plot(lst_2010)
plot(lst_2015)

rlist <- list.files(pattern="lst")

import <- lapply(rlist, raster)

# con la funzione stack unisco le 4 immagini/bande/oggetti in un solo file

TGr <- stack(import)
TGr
plot(TGr)

lapply(import, plot) # esperimento


plotRGB(TGr, 1, 2, 3, stretch="lin")
plotRGB(TGr, 2, 3, 4, stretch="lin")

# differenza di temperatura tra l'immagine del 2000 e quella del 2005
dift = TGr[[2]] - TGr[[1]]
plot(dift)

# per visualizzare meglio le differenze di temperatura nelle 4 immagini posso usare un plot con una colorpalette diversa dal RGB
cl <- colorRampPalette(c("blue","light blue","pink","red"))(100)
plot(TGr, col=cl)


# 13/04 European NO2 level, time series

library(raster)
setwd(("C:/Lab/EN"))

# importing a file, due funzioni per farlo: brick (tante bande) e raster (singolo strato)

EN_first <- raster("EN_0001.png")

cl2 <- colorRampPalette(c("red","orange","yellow"))(100)

plot(EN_first, col=cl2)

# importo tutti i file

EN_list <- list.files(pattern="EN")
EN_list

EN_import <- lapply(EN_list, raster)
EN_import

# compatto tutti i file in unico oggetto, tramite la funzione stack

EN <- stack(EN_import)
EN

plot(EN, col=cl2)

# facciamo un piccolo test di controllo 
# per vedere se il primo file caricato è effetivamente anche il primo dello stack

par(mfrow=c(1,2))
plot(EN_first, col=cl2)
plot(EN[[1]], col=cl2)

# check 2 faccio la differneza dei pixel e dovrebbe venirmi un'immagine vuota in caso di immagine uguale

difcheck <- EN_first - EN[[1]]
difcheck
plot(difcheck, col=cl2)

dev.off()

par(mfrow=c(1,2))

# osservo le immagini di gennaio e marzo a confronto
plot(EN[[1]], col=cl2)
plot(EN[[13]], col=cl2)

# faccio la differenza tra le due

difEN <- EN[[1]] - EN[[13]]
difEN
plot(difEN, col=cl)

# associo immagini di tre situazioni diverse ai tre colori RGB
plotRGB(EN, r=1, g=7, b=13, stretch="lin")
plotRGB(EN, r=1, g=7, b=13, stretch="hist")



# 14/04 Classification

library(raster)
setwd(("C:/Lab/"))

SO <- brick("Solar_Orbiter.jpg") # Nasa Earth Observatory 

plotRGB(SO, 1, 2, 3, stretch="lin")


# classifichiamo in questo caso i livelli energetici del sole
# per prima cosa
# trasformiamo i valori dei colori dell'immagine in valori in un tabulato usando la funzione getValues
singlenr <- getValues(SO)
singlenr

# usiamo la funzione kmeans per classificare questi valori
# centroide = media di una nuvola di punti (pixel in questo caso)
# con k-means raggruppo (clustering) i pixel di una immagine basandomi sulla media (centroide) di k classi
kcluster <- kmeans(singlenr, centers = 3) # in questo caso raggruppiamo i pixel in 3 classi (3 centroidi)
kcluster # tutti i valori originari sono stati riassegnati ad una delle 3 classi

# Adesso riassegno questi valori classificati ad una immagine con la funzione setValues
soclass <- setValues(SO[[1]], kcluster$cluster) # assign new values to a raster object

cl <- colorRampPalette(c('yellow','black','red'))(100)
plot(soclass, col=cl) 

# nel mio caso alla classe numero 3 (colore rosso) sono associati i livelli energetici più elevati
# class 3: highest energy level
# class 2: medium energy level
# class 1: lowest energy level


# calcolo la frequenza delle 3 classi con la funzione freq, il numero di pixel in ogni classe
frequencies <- freq(soclass)
frequencies

# calcolare la percentuale di pixel presenti nelle varie classi
tot_pixel = 2221440
percentages = frequencies * 100/tot_pixel
percentages

# class 1: 37,9 %
# class 2 42 %
# class 3: 21 %

# questa non è una classificazione supervisionata, noi decidiamo solo il numero di classi ma non le soglie.

# 20/04 Classification


library(raster)
setwd(("C:/Lab/"))

GC <- brick("Grand_Canyon.jpg")
GC

plotRGB(GC, 1,2,3, stretch="lin")

# in caso di immagine molto pesante, possiamo fare un ritaglio di immagine:
# la funzione per ritgliare l'immagine è crop

GCC <- crop(GC, drawExtent()) # in questo caso il ritaglio verrà fatto a mano sull'imagine con drawExtent()

# faccio correre la funzione di sopra e clicco il primo vertice in alto a sinistra
# e il secondo in basso a destra ritagliando l'immagine, dopodichè plotto la nuova immagine

plotRGB(GCC, 1,2,3, stretch="lin")


ncell(GCC) # mi dice il numero di pixel di una immagine

# classifichiamo l'immagine in base alla tipologia di roccia

pxlvalues <- getValues(GCC)
pxlvalues

kcluster_GCC <- kmeans(pxlvalues, centers = 6) # 6 classi
kcluster_GCC

GCC_Class <- setValues(GCC[[1]], kcluster_GCC$cluster)

par(mfrow=c(1,2))

plot(GCC_Class)
plotRGB(GCC, 1,2,3, stretch="lin")

# class 1: Shadows
# class 2: clouds
# class 3: stone type 1
# class 4: stone type 2
# class 5: stone type 3
# class 6: stone type 4

frequencies <- freq(GCC_Class)
frequencies

total = ncell(GCC_Class)

percentages <- (frequencies * 100)/ total
percentages
